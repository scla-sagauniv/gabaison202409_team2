// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  password      String?
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guests Guests[]
  friends UserOnFriends[]
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Restaurants{
  id Int @id @default(autoincrement())
  address String @unique
  name String?
  description String?
  image_url String?
  recruitings Recruitings[]
}

model Recruitings{
  id Int @id @default(autoincrement())
  max_guests String
  budget String
  meeting_time String
  restaurant Restaurants @relation(fields: [restaurantId], references: [id])
  restaurantId Int @unique
  guests Members[]
}

model Guests{
  id Int @id @default(autoincrement())
  users User @relation(fields: [usersId], references: [id])
  usersId String @unique
  recruitings Members[]
}

model Members{
  guest Guests @relation(fields: [guestId], references: [id])
  guestId Int @unique
  recruiting Recruitings @relation(fields: [recruitingId], references: [id])
  recruitingId Int @unique
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([guestId, recruitingId])
}

model Friends{
  id Int @id @default(autoincrement())
  user UserOnFriends[]
}

model UserOnFriends{
  user User @relation(fields: [userId], references: [id])
  userId String  @unique
  friend Friends @relation(fields: [friendId], references: [id])
  friendId Int @unique
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, friendId])
}

